#---------------------------------
# 1. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d
# --- This command will start the containers in detached mode without rebuilding the images (if they already exist)
#
# 2. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d --build
# --- This command forces the rebuild of images, even if the images already exist, before starting the containers ls
#---------------------------------
version: '3.9'

# Define services (containers) that will run as part of the microservices stack.
#------------------------
#MicroService Containers
#-------------------------
services:

  product-service:
    image: product-service
    ports:
      - "8087:8087"
    build:
      context: ./product-service  # The directory where the Dockerfile resides
      dockerfile: ./Dockerfile    # Specify the Dockerfile for use to build image
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  #------------------------
  #Database Containers
  #-------------------------
  mongodb:
    image: mongo:latest #If you dont specify the version you automatically get the latest version
    container_name: mongodb
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    #restart: unless-stopped  # restarts container indefinitely in case it has problems bringing it up
    #command: mongod -auth #enforces authentication
    networks:
      - spring

  mongo-express:
    image: mongo-express
    ports:
      - "8088:8088"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: mongo-express
    depends_on:
      - mongodb
    networks:
      - spring

# Optional values section for persisting data
volumes:
  mongo_db:
    driver: local


networks:
  spring:
    driver: bridge






    #------------------------
    #GUI Containers
    #-------------------------


